#<laconf>
  compiler
  {
     base-class-name="Azos.Wave.Templatization.StockContent.Master"
     using{ns="Azos.Serialization.JSON"}
     using{ns="Azos.Conf"}
     using{ns="System.Linq"}
     namespace="Azos.Wave.Templatization.StockContent"
     abstract="false"
     summary="ApiDoc Index Page"
  }
#</laconf>
#[class]

  public readonly IConfigSectionNode Data;
  public readonly Func<string, string> MapT;
  public ApiDoc_Schema(IConfigSectionNode data, Func<string, string> mapt) : base()
  {
    Data = data;
    MapT = mapt;
  }

  public override string Title { get {return "Azos Api Documentation Schema"; } }

  private string flag(IConfigSectionNode data, string name)=> data.AttrByName(name).ValueAsBool() ? "<b>X</b>" : "";

#[override renderHeader()]
 Api Type Schema

#[override renderBody()]
<h1>"?[Data.ValOf("sku")]" Schema</h1>
This section describes a complex (non-scalar) data type "?[Data.ValOf("sku")]" used by API operations.

Type BIX id is <strong>"?[Data.NavigateSection("data-doc/schema").ValOf("bix-id")]"</strong>.

<p>
Go back to <a href="./toc">Api Table of Contents.</a>
</p>

@[{
  type(Data);
}]

<p>
Go back to <a href="./toc">Api Table of Contents.</a>
</p>

#[type(IConfigSectionNode data)]
@[
  var docData = data["data-doc"];
  var permData = data["permission"];
  if (docData.Exists) doc(docData);
  if (permData.Exists) perm(permData);
]
<h3>Raw Schema Data</h3>
<pre>
  ?[data.ToLaconicString(CodeAnalysis.Laconfig.LaconfigWritingOptions.PrettyPrint)]
</pre>
<hr>

#[perm(IConfigSectionNode data)]
This type is a <strong>security permission</strong> see <a href="https://github.com/azist/azos/tree/master/src/Azos/Security">Azos Security Overview (GitHub)</a>


#[doc(IConfigSectionNode data)]
This type is a <strong>data document</strong> see <a href="https://github.com/azist/azos/blob/master/src/Azos/Data/metadata.md">Azos Schema Metadata Overview (GitHub)</a>
<table>
 <thead>
  <tr>
    <th> #</th>
    <th> Name </th>
    <th> Type </th>
    <th> Req </th>
    <th> Description </th>
    <th> Case </th>
    <th> Visible </th>
  </tr>
 </thead>
 <tbody>

@[{
  var fields = data["schema"].Children.Where(c => c.IsSameName("field"));
  foreach(var fld in fields) docField(fld);
}]

 <tbody>
</table>


#[docField(IConfigSectionNode data)]
<tr>
  <td>?[data.ValOf("order")]</td>
  <td>?[data.ValOf("name")]</td>
  <td> ?[: MapT(data.ValOf("type"))] @[var k = data.ValOf("kind"); if(k!="Text"){]&nbsp;/&nbsp;?[k] @[}]</td>
  <td>?[:flag(data, "required")]</td>
  <td>?[data.ValOf("description")]</td>
  <td>?[data.ValOf("case")]</td>
  <td>?[:flag(data, "visible")]</td>
</tr>

