app
{
  log-root=$(~AZOS_TEST_ROOT)\
  log-csv="Azos.Log.Sinks.CSVFileSink, Azos"
  debug-default-action="Log,Throw"

  cloud-origin="local"

  log
  {
    name="LogSvc"

    sink
    {
     type=$(/$log-csv)
     name="WaveTestSite Log"
     path=$(/$log-root)
     file-name="{0:yyyyMMdd}-$($name).csv.log"
     generate-failover-msg=false
    }
  }

  object-store { name="Main Object Store"
                 guid="A2E59DBB-27AE-4803-A19E-72C99DD8956E"
                 object-life-span-ms="180000"
                 bucket-count="1024"


    provider
    {
              name="Disk Object Store Provider"
              type="Azos.Apps.Volatile.FileObjectStoreProvider"
              load-limit="0"
              root-path=$(/$log-root)
    }

  }


  wave
  {
    server
    {
        environment-name="PROD"
        instrumentation-enabled=true

        prefix{ name="http://+:8080/" }

        default-error-handler
        {
            show-dump { match{name=all} }
            //log {  match{name=all} }
        }

        gate
        {
            //type="may inject type"
            name="Default Gate"
            enabled = false
        }

        dispatcher
        {



          filter
          {
            name="Errors" order=0 type="Azos.Wave.Filters.ErrorFilter, Azos.Wave"
            show-dump { match{name=all} }
          }



  filter
  {
     order=1
     name="session"
     type="Azos.Wave.Filters.AuthorizeSessionFilter, Azos.Wave"

     //Enable database multi-targeting
     //the callers can supply this header with data context name
     data-context-header="wv-data-ctx"

     //An alias to Authorization header
     //This can be useful for browser-based sticky headers
     alt-authorization-header="wv-pass"

     //When set, enables gating of bad auth by bumping the named variable by +1
     gate-bad-auth-var="session_badAuth" //see gate.laconf

     //When set, forces the treatment of Bearer scheme token starting with this prefix as Basic
     //this is used for some integrations which are not capable of setting proper auth scheme
     //bearer-basic-prefix="treat-as-basic--"

     //You can temporarily turn this on to pretend that callers have sent this in
     //used for temp testing od clients and should always be disabled in prod
     //////// default-impersonation-authorization-header-value="Basic xxxxxxxxxxxxx"
  }


//**************** ADLIB TESTING
  handler
  {
    order=12
    name="adlib.apis"
    type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"
    type-location{ assembly="Azos.Wave.dll" ns{ name="Azos.Data.Adlib.Server*"}}

    log-level=Debug

    match{ order=1 path="/v1/adlib/{type}/{mvc-action}/{id}" var{query-name="*"} }
    match{ order=2 path="/adlib/{type}/{mvc-action}/{id}"    var{query-name="*"} }
  }

//**************** ADLIB TESTING
        }//dispatcher
    }//server
  }//wave


  security
  {
    users
    {
      user
      {
        name="Root"
        description="Root User"
        status="System"
        id="root"
        //password = thejake
        password='{"alg":"MD5","fam":"Text","hash":"WtaG\\/XLsvvrC5CCpmm92Aw==","salt":"g7sni3\\/uh08Ttb2Yar9optRPtd3aIQaDe89UTA=="}'
        rights
        {
           BusinessLogic{ Sultan{ level="12" }}
           TestPermissions{ Space{ Flight{     Echo{ level="50" }  }}}
        }
      }
   }
  }


  modules
  {
    //Responsible for generating Global Distributed Id (GDID)
    //The `local` environment uses local authority for testing instead of true id service
    //the local authority generates gdid based on timestamp prefixes and has worse resolution
    module
    {
        name="gdidprovider"
        type="Azos.Sky.Identification.GdidProviderModule, Azos.Sky"
        log-level=Debug

        use-local-authority=true
        generator
        {
            //As a protection mechanism in case when various environments share the same
            //physical data store, we set era to some unrealistic number in future so
            //the ids never clash
            era=0xff0100//use unrealistic era for a very distant future
            authority=0
        }
    }


    module
    {
      type='Azos.Data.Adlib.Server.AdlibNode, Azos.MongoDb'
      space { id="s1" cs="mongo{server='mongo://localhost:27017' db='adlib-s1'}" }
      space { id="s2" cs="mongo{server='mongo://localhost:27017' db='adlib-s2'}" }
    }

  }
}
