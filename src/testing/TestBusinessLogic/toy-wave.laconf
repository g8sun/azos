app
{
  log-root=$(~AZOS_TEST_ROOT)\
  log-csv="Azos.Log.Sinks.CSVFileSink, Azos"
  debug-default-action="Log,Throw"

  cloud-origin="local"

 web-settings
 {
    social
    {
        provider
        {
          type="Azos.Web.Social.Facebook, Azos.Web"
          app-id="410577972401564"
          client-secret="ffd9140afcd6b1e743e7affa9613d7f4"
        }

        provider
        {
          type="Azos.Web.Social.Twitter, Azos.Web"
          client-code="7wzQlicXz5sdM5ScrxSrNg"
          client-secret="OEb6gMSFwMBLew2BhHp3y6FgK4vxfoQmJBYG2Exb4E"
        }
    }

    web-dav {}

 }


  log
  {
    name="LogSvc"

    sink
    {
     type=$(/$log-csv)
     name="WaveTestSite Log"
     path=$(/$log-root)
     file-name="{0:yyyyMMdd}-$($name).csv.log"
     generate-failover-msg=false
    }
  }

  object-store { name="Main Object Store"
                 guid="A2E59DBB-27AE-4803-A19E-72C99DD8956E"
                 object-life-span-ms="180000"
                 bucket-count="1024"


    provider
    {
              name="Disk Object Store Provider"
              type="Azos.Apps.Volatile.FileObjectStoreProvider"
              load-limit="0"
              root-path=$(/$log-root)
    }

  }


  /*instrumentation
  {
      name="Instruments" interval-ms="2000"
      provider
      {
         name="Telemetry Instrumentation Provider"
         type="Azos.Instrumentation.Telemetry.TelemetryInstrumentationProvider"
         use-log="false"
         receiver-node="sync://127.0.0.1:8300"
      }
  }*/

  glue
  {
    bindings
    {
      binding { name="sync" type="Azos.Glue.Native.SyncBinding" }
    }
  }//glue



/*
  geo-lookup
  {
    data-path=$(~AZOS_GEODATA)
    resolution="city"
  }
*/
  wave
  {
    server
    {
       // name="Main Test Server"
  //parallel-works=1282048
  //parallel-accepts=128024
  //kernel-http-queue-limit=512000

        environment-name="PROD"
        instrumentation-enabled=true


        match{ host-name="localhost:8080"}

        default-error-handler
        {
            show-dump { match{name=all} }
            //log {  match{name=all} }
        }

        gate
        {
            //type="may inject type"
            name="Default Gate"
            enabled = true

            incoming
            {
                default-action=allow

                rule{name="sessionFlood" order=0 action=deny from-expression="$newSession>3"}


                rule{name="all_for_dima"  order=1 action=allow from-addrs="170.12.14.12;170.12.14.13"}
                rule{name="Suspicious"    order=2 action=deny  from-addrs="170.2.1.*"}
                rule{name="CC hackers"    order=3 action=deny  from-addrs="170.4.*" from-groups="CCAtackers;Greedy"}
              //  rule{name="Session flood" order=4 action=deny  from-expression="$session<=(?$a<10,$a,12)"}

                group
                {
                  name="CCAttackers"
                  address{name="John Cle" patterns="32.44.*"}
                  address{name="John Pitt" patterns="32.45.*"}
                }

                var-def{name="newSession" decay-by="1" interval-sec="20"}
                var-def{name="cc-recharge" decay-by="1" interval-sec="600"}
            }
        }

     root-handler
     {


// filter
// {
 // name="Log All" order=0 type="Azos.Wave.Filters.LoggingFilter, Azos.Wave"
 // before
 // {
    // match
    // {
      // path="{*PAZZ}"
      // var{name="type" default="TraceD"}
    // }
 // }
//}

         /*   handler
            {
              name="Push SSE"
              order=0
              type="WaveTestSite.Handlers.PushHandler, TestBusinessLogic"
              match{path="push" }
            }
         */

            // handler
            // {
                // name="H"
                // order=0
                // type="WaveTestSite.Handlers.SimpleHandler, TestBusinessLogic"
                // match{ }
            // }

            filter
            {
              name="Errors" order=0 type="Azos.Wave.Filters.ErrorFilter, Azos.Wave"
              show-dump
              {
                match{name="localhost" order=1 is-local=true }
              }

             // security-redirect-url="http://lenta.ru"
             // custom-error-page-type="WaveTestSite.Pages.AboutUs, TestBusinessLogic"

               log
               {
                 //match{name="all" var{name="aaa" default="1223"} }
                 //match{name="allButSecurity" type="Azos.Wave.NotAuthorizationExceptionMatch, Azos.Wave"}
                 match
                 {
                   name="composite"
                   type="Azos.Wave.CompositeWorkMatch, Azos.Wave"
                   and
                   {
                     match{name="butSecurity" type="Azos.Wave.NotAuthorizationExceptionMatch, Azos.Wave"}
                   //  match{name="but404" type="Azos.Wave.HttpResponseStatusCodeMatch, Azos.Wave" code=404 is-not=true}
                   }
                   or{}
                 }
               }//log
            }

            |*
            filter
            {
              name="BlockNonDevs" order=1 type="Azos.Wave.Filters.RedirectFilter, Azos.Wave"
              match
              {
                not-path="/mvc/tester/zekret"
                absent-cookies="ZEKRET=Hello"
                var{name="redirect-url" default="/mvc/tester/zekret"}
              }
            }
            *|

|*
            filter
            {
              name="sessions" order=2 type="Azos.Wave.Filters.SessionFilter, Azos.Wave"
             //session-timeout-ms="60000"
             // session-cookie-name="GANBA-BILLY-GATSY"
            }
*|

  filter
  {
     order=1
     name="session"
     type="Azos.Wave.Filters.AuthorizeSessionFilter, Azos.Wave"

     //Enable database multi-targeting
     //the callers can supply this header with data context name
     data-context-header="wv-data-ctx"

     //An alias to Authorization header
     //This can be useful for browser-based sticky headers
     alt-authorization-header="wv-pass"

     //When set, enables gating of bad auth by bumping the named variable by +1
     gate-bad-auth-var="session_badAuth" //see gate.laconf

     //When set, forces the treatment of Bearer scheme token starting with this prefix as Basic
     //this is used for some integrations which are not capable of setting proper auth scheme
     //bearer-basic-prefix="treat-as-basic--"

     //You can temporarily turn this on to pretend that callers have sent this in
     //used for temp testing od clients and should always be disabled in prod
     //////// default-impersonation-authorization-header-value="Basic xxxxxxxxxxxxx"
  }


            filter
            {
              name="Old Redirects" order=3 type="Azos.Wave.Filters.RedirectFilter, Azos.Wave"
              match{ path="old/w.html" var{name="redirect-url" default="/pages/Welcome"} }
              match{ path="old/au.html" var{name="redirect-url" default="/pages/AboutUs"} }
            }


            handler
            {
                name="Mvc Testing"
                order=0
                type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"

                type-location { name="local" assembly="TestBusinessLogic.dll" ns{ name="WaveTestSite.Controllers"} }
                type-location { name="sky" assembly="Azos.Sky.dll" ns{ name="Azos.Apps.Terminal.Web*"} }

                match{ path="mvc/{type}/{mvc-action}" var{query-name="*"} }
            }

            handler
            {
                name="Config Forest Testing"
                order=10
                type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"

                type-location { name="local" assembly="Azos.Wave.dll" ns{ name="Azos.Conf.Forest.Server"} }

                match{ path="conf/forest/{type}/{mvc-action}" var{query-name="*"} }
            }

//**************** AUTHKIT TESTING
  handler
  {
    order=12
    name="minidp.apis"
    type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"
    type-location{ assembly="Azos.Wave.dll" ns{ name="Azos.Security.MinIdp*"}}

    log-level=Debug

    match{ order=1 path="/v1/minidp/{type}/{mvc-action}/{id}" var{query-name="*"} }
    match{ order=2 path="/minidp/{type}/{mvc-action}/{id}"    var{query-name="*"} }
  }


  handler
  {
    order=15
    name="idp.apis"
    type="Azos.Wave.Handlers.MvcHandler, Azos.Wave"
    type-location{ assembly="Azos.AuthKit.Server.dll" ns{ name="Azos.AuthKit.Server.Web"}}

    log-level=Debug

    match{ order=1 path="/v1/idp/{type}/{mvc-action}/{id}" var{query-name="*"} }
    match{ order=2 path="/idp/{type}/{mvc-action}/{id}"    var{query-name="*"} }
  }
//**************** AUTHKIT TESTING



            handler
            {
                name="Embedded Site"
                order=30
                type="WaveTestSite.Embedded.EmbeddedTestSiteHandler, TestBusinessLogic"
                match{ path="embed/{*path}" }
            }

            handler
            {
                name="Pages"
                order=40
                type="Azos.Wave.Handlers.TemplateHandler, Azos.Wave"
                //default-type="Welcome"
                //cloak-type=$($default-type)
                not-found-redirect-url="/pages/Welcome"
                match{ path="pages/{*type}"}
                type-location { name="local" assembly="TestBusinessLogic.dll" ns{ name="WaveTestSite.Pages"} }

               /* filter
                {
                    name="geoLocation"
                    type="Azos.Wave.Filters.GeoLookupFilter, Azos.Wave"
                }*/

            }

            handler
            {
                name="Stock Content Embedded Site"
                order=50
                type="Azos.Wave.Handlers.StockContentSiteHandler, Azos.Wave"
                match{ path="stock/{*path}"}
            }

            handler
            {

                filter
                {
                 name="Security" order=0 type="Azos.Wave.Filters.SecurityFilter, Azos.Wave"
                 permissions
                   {
                        permission
                        {
                         type="Azos.Security.AdHocPermission, Azos"
                         arg0="SpecialPermissions/Cooking"
                         arg1="BBQOperator"
                         arg2=7
                        }
                   }
                }


                filter
                {
                 name="Stopper" order=1 type="Azos.Wave.Filters.StopFilter, Azos.Wave"
                 before
                 {
                    match
                    {
                      name="all"
                      var{query-name="who" match-contains="lenin" match-case-sensitive=false}
                      var{name="error" default="Lenin was stopped!"}
                    }
                 }
                }

                filter
                {
                 name="Logger" order=3 type="Azos.Wave.Filters.LoggingFilter, Azos.Wave"
                 before
                 {
                    match
                    {
                      var{name="type" default="Trace"}
                      var{name="CODZ" default="10003"}
                    }

                 }
                 after
                 {
                    match
                    {
                      var{name="type" default="Trace"}
                      var{name="CODZ" default="100018"}
                       permissions
                       {
                            permission //only those who have this permission will be logged
                            {
                             type="Azos.Security.AdHocPermission, Azos"
                             arg0="CanLogAfter"
                             arg1="SpecialPermissions"
                             arg2=3
                            }
                       }
                    }

                 }
                }

                name="Downloader"
                order=60
                type="Azos.Wave.Handlers.FileDownloadHandler, Azos.Wave"
                throw=true

                root-path=$"c:\users\anton\desktop"

                //cache-control { max-age-sec=10 }

                match
                {
                    name="Files"
                    order=1
                    path="download/{*filePath}"
                    var{name="attachment" query-name="a" default="false" }
                    var{name="chunked" query-name="c" default="true" }
                }

                match
                {
                    name="Files2"
                    order=2
                    path="z/{*filePath}"
                    var{name="attachment" query-name="a" default="false" }
                    var{name="chunked" query-name="c" default="true" }
                }
            }//handler


            handler
            {
                name="Catch All"
                order=70
                type="Azos.Wave.Handlers.NOPHandler, Azos.Wave"
                match{ }

                filter
                {
                  name="Default" type="Azos.Wave.Filters.RedirectFilter, Azos.Wave"
                  match{ var{name="redirect-url" default="/pages/Welcome"} }
                }
            }

      }//handler root
    }//server
  }//wave



  security
  {
    type="Azos.Security.ConfigSecurityManager, Azos"

    cryptography
    {
      algorithm
      {
        name='aes1'  default=true
        type='Azos.Security.HMACAESCryptoMessageAlgorithm, Azos'
        hmac{key='0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3'}
        aes{key='0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1,2,3,4,5,6,7,8,9,0,1'}
      }
    }

    users
    {
      user
      {
        name="Dima"
        description="Dima"
        id="dima"
        password='{"alg":"MD5","fam":"Text","hash":"ZcrDK120Iwj08Qqfzvz95w==","salt":"e0K7BA4Ylby2kWAp3nCR3A9jSw=="}'
        status="User"
        rights
        {
          TestPath
          {
            TestPermission
            {
              level=150
            }
          }
        }
      }

      user
      {
        name="root"
        description="Root Account"
        id="root"
        password='{"alg":"KDF","fam":"Text","h":"BGi67Y0GTtJdA_BXKwg4cttKMXu4LHQCBob5P151sno","s":"Js-WppOKGW3PeC_sGF6eztRybm7CSkt141ohS9Y1qKQ"}'
        status="System"
        rights
        {

        }
      }

      user
      {
        name="OauthApp1"
        description="OAuth app1"
        id="app1"
        password='{"alg":"MD5","fam":"Text","hash":"ZcrDK120Iwj08Qqfzvz95w==","salt":"e0K7BA4Ylby2kWAp3nCR3A9jSw=="}'
        status="User"
        rights
        {
          Azos{Security{Services{
            OAuthClientApp{
              level=1
              uri{pat="*"}
              addr{pat="*"}
            }

          }}}
        }
      }


    }
  }


  modules
  {
    //Responsible for generating Global Distributed Id (GDID)
    //The `local` environment uses local authority for testing instead of true id service
    //the local authority generates gdid based on timestamp prefixes and has worse resolution
    module
    {
        name="gdidprovider"
        type="Azos.Sky.Identification.GdidProviderModule, Azos.Sky.Server"
        log-level=$(/machine/$log-level-comp)

        use-local-authority=true
        generator
        {
            //As a protection mechanism in case when various environments share the same
            //physical data store, we set era to some unrealistic number in future so
            //the ids never clash
            era=0xff$(~SKY_NODE_DISCRIMINATOR)00//use unrealistic era for a very distant future
            authority=0
        }
    }


    module
    {
      type='Azos.Security.Services.OAuthModule, Azos'
      supported-scopes="openid connect"
    }

    module
    {
      type='Azos.Conf.Forest.Server.ForestLogic, Azos'

      data
      {
        type="Azos.Conf.Forest.Server.ForestDataSource, Azos"
        forest
        {
          name="sherwood"
          tree
          {
            name="t1"
            type="Azos.MySql.ConfForest.MySqlConfForestTreeDataStore, Azos.MySql"
            connect-string="Server=localhost;Database=sherwood_t1;Uid=svcbasic;Pwd=thejake;"
            //Defines where query objects are resolved into
            script-assembly="Azos.MySql"
            handler-location{ns="Azos.MySql.ConfForest.Queries, Azos.MySql"}
          }

          tree
          {
            name="t2"
            type="Azos.MySql.ConfForest.MySqlConfForestTreeDataStore, Azos.MySql"
            connect-string="Server=localhost;Database=sherwood_t2;Uid=svcbasic;Pwd=thejake;"
            //Defines where query objects are resolved into
            script-assembly="Azos.MySql"
            handler-location{ns="Azos.MySql.ConfForest.Queries, Azos.MySql"}
          }

        }//forest
      }//data
    }//module

    module
    {
      name="kestrel"
      type="Azos.Wave.Kestrel.KestrelServerModule, Azos.Wave.Kestrel"

      host
      {
        binding{ port=8080}
        binding{ port=8090 cert-file="test-certificate.pfx" cert-pwd="YourSecurePassword" }
      }
    }//module
  }
}
