/*<FILE_LICENSE>
 * Azos (A to Z Application Operating System) Framework
 * The A to Z Foundation (a.k.a. Azist) licenses this file to you under the MIT license.
 * See the LICENSE file in the project root for more information.
</FILE_LICENSE>*/

using System;
using System.Reflection;
using System.Threading.Tasks;

using Azos.Apps.Injection;
using Azos.Data;
using Azos.Security.Authkit;
using Azos.Wave;
using Azos.Wave.Mvc;
using Azos.Web;

namespace Azos.AuthKit.Server.Web
{
  [NoCache]
  [ApiControllerDoc(
    BaseUri = "/idp/usercore",
    Connection = "default/keep alive",
    Title = "AuthKit User Core Controller",
    Authentication = "Token/Default",
    Description = "Provides REST API for IIdpUserCoreLogic contracts",
    ResponseHeaders = new[] { API_DOC_HDR_NO_CACHE },
    TypeSchemas = new[] { typeof(UserManagementPermission) }
  )]
  [UserManagementPermission(UserManagementAccessLevel.View)]
  public sealed class UserCore : ApiProtocolController
  {
    public const string ACT_FILTER = "filter";
    public const string ACT_USER = "user";
    public const string ACT_USER_LOGINS = "userlogins";
    public const string ACT_LOGIN = "login";
    public const string ACT_LOCK_STATUS = "lock";

    [Inject] IIdpUserCoreLogic m_Logic;

    protected override ValueTask<(bool, object)> BeforeActionInvocationAsync(WorkContext work, string action, MethodInfo method, object[] args, object result)
    {
      try
      {
        Ambient.CurrentCallSession.GetAtomDataContextName();
      }
      catch(Exception cause)
      {
        throw new HTTPStatusException(400, "Missing REALM/DataContext", cause.ToMessageWithType(), cause);
      }

      return base.BeforeActionInvocationAsync(work, action, method, args, result);
    }


    [ApiEndpointDoc(Title = "Filter",
                    Uri = "filter",
                    Description = "Queries AuthKit users by applying a structured filter `{@UserListFilter}`",
                    Methods = new[] { "POST = post filter object for query execution" },
                    RequestHeaders = new[] { API_DOC_HDR_ACCEPT_JSON },
                    ResponseHeaders = new[] { API_DOC_HDR_NO_CACHE },
                    RequestBody = "JSON representation of `{@UserListFilter}`",
                    ResponseContent = "JSON filter result - enumerable of `{@UserInfo}`",
                    TypeSchemas = new[] { typeof(UserInfo), typeof(UserListFilter) })]
    [ActionOnPost(Name = ACT_FILTER), AcceptsJson]
    [UserManagementPermission(UserManagementAccessLevel.View)]
    public async Task<object> PostUserFilter(UserListFilter filter)
      => await ApplyFilterAsync(filter).ConfigureAwait(false);

    [ApiEndpointDoc(Title = "POST - Creates User Entity",
                    Description = "Creates a new user account. " +
                    "Do not include `Gdid` as it is generated by the server for new entities",
                    RequestBody = "JSON representation of {node: UserEntity}",
                    ResponseContent = "JSON representation of {OK: bool, data: ChangeResult}",
                    Methods = new[] { "POST: Inserts a new user account entity" },
                    TypeSchemas = new[]{ typeof(UserEntity), typeof(ChangeResult) })]
    [ActionOnPost(Name = ACT_USER)]
    [UserManagementPermission(UserManagementAccessLevel.Change)]
    public async Task<object> PostUserEntity(UserEntity user)
      => await SaveNewAsync(user).ConfigureAwait(false);

    [ApiEndpointDoc(Title = "PUT - Updates User Entity",
                    Description = "Updates an user account. " +
                    "Must include `Gdid` for the user which is being updated",
                    RequestBody = "JSON representation of {node: UserEntity}",
                    ResponseContent = "JSON representation of {OK: bool, data: ChangeResult}",
                    Methods = new[] { "PUT: Updates user account entity" },
                    TypeSchemas = new[] { typeof(UserEntity), typeof(ChangeResult) })]
    [ActionOnPut(Name = ACT_USER)]
    [UserManagementPermission(UserManagementAccessLevel.Change)]
    public async Task<object> PutUserEntity(UserEntity user)
    => await SaveEditAsync(user).ConfigureAwait(false);


    [ApiEndpointDoc(
      Title = "GET - Retrieves a list of user logins",
      Description = "Returns a list of login info objects for the selected user account",
      RequestQueryParameters = new[]{
            "gUser=GDID of the user used to retrieve logins"},
      ResponseContent = "Http 200 / JSON representation of {OK: true, data: [LoginInfo]} or Http 404 {OK: false, data: null}",
      Methods = new[] { "GET: list of [LoginInfo]" },
      TypeSchemas = new[]{
            typeof(LoginInfo)
      })]
    [ActionOnGet(Name = ACT_USER_LOGINS)]
    [UserManagementPermission(UserManagementAccessLevel.View)]
    public async Task<object> GetLoginListAsync(GDID gUser)
      => GetLogicResult(await m_Logic.GetLoginsAsync(gUser).ConfigureAwait(false));


    [ApiEndpointDoc(Title = "POST - Creates User Login Entity",
                    Description = "Creates a new login for a user. " +
                    "Do not include `Gdid` as it is generated by the server for new entities",
                    RequestBody = "JSON representation of {node: LoginEntity}",
                    ResponseContent = "JSON representation of {OK: bool, data: ChangeResult}",
                    Methods = new[] { "POST: Inserts a new login entity" },
                    TypeSchemas = new[] { typeof(LoginEntity), typeof(ChangeResult) })]
    [ActionOnPost(Name = ACT_LOGIN)]
    [UserManagementPermission(UserManagementAccessLevel.Change)]
    public async Task<object> PostLoginEntity(LoginEntity login)
      => await SaveNewAsync(login).ConfigureAwait(false);


    [ApiEndpointDoc(Title = "PUT - Updates User Login Entity",
                    Description = "Updates an login for a user. " +
                    "Must include `Gdid` for the user which is being updated",
                    RequestBody = "JSON representation of {node: UserLogin}",
                    ResponseContent = "JSON representation of {OK: bool, data: ChangeResult}",
                    Methods = new[] { "PUT: Updates user login entity" },
                    TypeSchemas = new[] { typeof(LoginEntity), typeof(ChangeResult) })]
    [ActionOnPut(Name = ACT_LOGIN)]
    [UserManagementPermission(UserManagementAccessLevel.Change)]
    public async Task<object> PutLoginEntity(LoginEntity login)
    => await SaveEditAsync(login).ConfigureAwait(false);


    [ApiEndpointDoc(Title = "PUT - Updates LockStatus Entity",
                    Description = "Updates a lock status for a user or login. " +
                    "Must include `TargetEntity` for the user or login which is being updated",
                    RequestBody = "JSON representation of {node: LockStatus}",
                    ResponseContent = "JSON representation of {OK: bool, data: ChangeResult}",
                    Methods = new[] { "PUT: Updates lock status for a user or login" },
                    TypeSchemas = new[] { typeof(LockStatus), typeof(ChangeResult) })]
    [ActionOnPut(Name = ACT_LOCK_STATUS)]
    [UserManagementPermission(UserManagementAccessLevel.Change)]
    public async Task<object> PutLockStatusEntity(LockStatus lockStatus)
    => await SaveEditAsync(lockStatus).ConfigureAwait(false);
  }
}
